########################################################################
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this file, to deal in the File without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the File, and to permit persons to whom the
# File is furnished to do so, subject to the following condition:
#
# THE FILE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE FILE OR
# THE USE OR OTHER DEALINGS IN THE FILE.

########################################################################
# The standard OMakefile.
# You will usually need to modify this file for your project.

########################################################################
# Phony targets are scoped, so you probably want to declare them first.
#

.PHONY: all install uninstall clean


########################################################################
# Subdirectories.
# You may want to include some subdirectories in this project.
# If so, define the subdirectory targets and uncomment this section.
#

# .SUBDIRS:

########################################################################
# OCaml configuration.
# Delete this section if you are not building OCaml files.
#

################################################
# Configuration.  You may want to modify any of these configuration
# variables.
#
MENHIR_ENABLED = true

#
# This project requires ocamlfind (default - false).
#
USE_OCAMLFIND = true

#
OCAMLPACKS[] =
   batteries
   llvm
   llvm.bitwriter
   llvm.analysis
   llvm.executionengine
   ctypes
   stdint

#
if $(not $(OCAMLFIND_EXISTS))
   eprintln(This project requires ocamlfind, but is was not found.)
   eprintln(You need to install ocamlfind and run "omake --configure".)
   exit 1

#
# Include path
#
# OCAMLINCLUDES +=

#
# Compile native or byte code?
#
# The default values are defined as follows:
#
# NATIVE_ENABLED = $(OCAMLOPT_EXISTS)
# BYTE_ENABLED = $(not $(OCAMLOPT_EXISTS))

#
# Various options
#
if $(equal $(RELEASE), true)
   # do nothing...
else
   OCAMLFLAGS    += -g -bin-annot
   export

if $(equal $(COVERAGE), true)
   OCAMLPACKS    += bisect_ppx
   export

# OCAMLCFLAGS   +=
# OCAMLOPTFLAGS +=
# OCAML_LINK_FLAGS +=
# OCAML_BYTE_LINK_FLAGS +=
# OCAML_NATIVE_LINK_FLAGS +=


################################################
# Generated files
#
# Workaround for the fact that ocamldep does not pay attention to .mll
# and .mly files.
#
MENHIR_FLAGS_BASE = --infer -v
MENHIR_FLAGS	  = $(MENHIR_FLAGS_BASE) --only-tokens
MenhirMulti(tokens, tokens)
OCamlGeneratedFiles(tokens.ml)

MENHIR_FLAGS	  = $(MENHIR_FLAGS_BASE) --external-tokens Tokens
MenhirMulti(parser, tokens parser)
OCamlGeneratedFiles(parser.ml)

#syntax.messages:
#    $(MENHIR) --list-errors --base parser.mly parser.mly tokens.mly > syntax.messages

#parser_messages.ml: syntax.messages
#    cp syntax.messages syntax.messages.pre
#    $(MENHIR) --update-errors syntax.messages.pre --base parser.mly parser.mly tokens.mly > syntax.messages
#    $(MENHIR) --compile-errors syntax.messages --base parser.mly parser.mly tokens.mly > parser_messages.ml

parser_messages.ml:
    touch parser_messages.ml

OCamlGeneratedFiles(lexer.ml)

gen_config() =
    stdout = $(fopen config.ml, w)
    fsubst(config.ml.template)
    case $"\?PREFIX" g
        value "$(PREFIX)"
    case $"\?BIN_DIR" g
        value "$(BIN_DIR)"
    case $"\?LIB_DIR" g
        value "$(LIB_DIR)"
    case $"\?INCLUDE_DIR" g
        value "$(INCLUDE_DIR)"
    case $"\?RELEASE" g
	    value $(RELEASE)
    case $"\?USE_LOCAL_DEV_LIB" g
        value $(USE_LOCAL_DEV_LIB)
    close($(stdout))

config.ml:
    gen_config()

################################################
# Build an OCaml program
#

FILES[] =
   main
   nodes
   ast
   tagged_ast
   lexer
   parser
   tokens
   parser_messages
   syntax
   env
   env_system
   sema
   sema_forward_ref
   sema_construct_env
   sema_definitions
   sema_context
   sema_utils
   codegen_context
   codegen_llvm
   codegen_llvm_intrinsics
   type
   type_attr
   type_sets
   type_info
   ctfe_engine
   ctfe_value
   ctfe_exn
   ctfe_util
   value_category
   unification
   module_info
   builtin_info
   mangle
   lifetime
   meta_level
   config
   debug

#
PROGRAM = rillc
# OCAML_LIBS +=
# OCAML_CLIBS +=
# OCAML_OTHER_LIBS +=
# OCAML_LIB_FLAGS +=
#
.DEFAULT: $(OCamlProgram $(PROGRAM), $(FILES))

########################################################################
#
install:
    prepare-directory($(BIN_DIR))
    cp $(PROGRAM) $(BIN_DIR)/$(PROGRAM)

uninstall:
    rm-if-exists($(BIN_DIR)/$(PROGRAM))

clean:
    rm -f *~ *.opt *.cmi *.cmx *.cmt *.cmti *.cmp *.cmxa *.omc \
		*.o *.a *.out *.s *.bc *.log *.cache $(PROGRAM) \
		parser.ml parser.mli tokens.ml tokens.mli lexer.ml \
		parser_messages.ml syntax.messages.pre \
        config.ml \
		*.conflicts *.automaton
