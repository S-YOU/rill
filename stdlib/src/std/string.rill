/*
* experimental...
*/

package std;

class string
{
    def 'a ctor(s: 'a raw_ptr!(uint8)) {
        val l = s.strlen();
        val ptr = malloc(l+1);
        val ptr2 = ptr.unsafe_ptr_cast!(uint8)();
        memcpy(ptr2, s, l+1);

        this.p = ptr2;
    }

    def ctor(rhs: string) {
        val l = rhs.size();
        val ptr = malloc(l+1);
        val ptr2 = ptr.unsafe_ptr_cast!(uint8)();
        memcpy(ptr2, rhs.p, l+1);

        this.p = ptr2;
    }

    def dtor() {
        free(this.p);
    }

/*
    def insert(c: uint8, index: int32): void {
        val ptr = malloc(this.p.strlen()+1+1).unsafe_ptr_cast!(uint8)();

        memcpy(ptr, this.p, index);
        memcpy(ptr+index+1, this.p+index, this.p.strlen()-index+1);
        //*(ptr+index) = c;
        memset(ptr+index, c, 1);

        this.p = ptr;
    }

    def remove(index: int32): void {
        val ptr = malloc(this.p.strlen()+1-1).unsafe_ptr_cast!(uint8)();
        memcpy(ptr, this.p, index);
        memcpy(ptr+index, this.p+index+1, this.p.strlen()-index+1);

        this.p = ptr;
    }
*/
    def size(): int32 {
        return strlen(this.p);
    }

    val p: 'unmanaged raw_ptr!(uint8);
}

// TODO: fix
import std.stdio;

def println(s: string): void {
    s.p.println();
}

def 'a to_string(p: 'a raw_ptr!uint8) {
    return string(p);
}

// experimental !!!!!!!
extern def read_string_impl(): 'static raw_ptr!(uint8) = "rill_read_string";
def read_string(): string => string(read_string_impl());

extern def strlen(val :raw_ptr!(uint8)): int32 = "rill_strlen";
