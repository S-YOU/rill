// TODO: move to
extern def print(v: int32): void = "rill_print_int";
extern def print(v: bool): void = "rill_print_bool";
extern def print_int(v: int32): void = "rill_print_int";

// TODO: implement by macro
extern def assert(:bool): void = "rill_assert";
extern def assert_not(:bool): void = "rill_assert_not";

#[builtin, primitive]
extern class type = "__builtin_type_type"


#[builtin, primitive, novalue]
extern class void = "__builtin_void_type"


#[builtin, primitive]
extern class bool = "__builtin_bool_type"


#[builtin, primitive]
extern class int32 = "__builtin_int32_type"

// TODO: implement attributes scope
#[builtin]
extern def operator+(:int32, :int32): int32 = "__builtin_op_binary_+_int_int";
#[builtin]
extern def operator-(:int32, :int32): int32 = "__builtin_op_binary_-_int_int";
#[builtin]
extern def operator*(:int32, :int32): int32 = "__builtin_op_binary_*_int_int";
#[builtin]
extern def operator/(:int32, :int32): int32 = "__builtin_op_binary_/_int_int";
#[builtin]
extern def operator%(:int32, :int32): int32 = "__builtin_op_binary_%_int_int";
#[builtin]
extern def operator<(:int32, :int32): bool = "__builtin_op_binary_<_int_int";
#[builtin]
extern def operator>(:int32, :int32): bool = "__builtin_op_binary_>_int_int";
#[builtin]
extern def operator|(:int32, :int32): int32 = "__builtin_op_binary_|_int_int";
#[builtin]
extern def operator^(:int32, :int32): int32 = "__builtin_op_binary_^_int_int";
#[builtin]
extern def operator&(:int32, :int32): int32 = "__builtin_op_binary_&_int_int";
#[builtin]
extern def operator>=(:int32, :int32): bool = "__builtin_op_binary_>=_int_int";
#[builtin]
extern def operator<=(:int32, :int32): bool = "__builtin_op_binary_<=_int_int";
#[builtin]
extern def operator<<(:int32, :int32): int32 = "__builtin_op_binary_<<_int_int";
#[builtin]
extern def operator>>(:int32, :int32): int32 = "__builtin_op_binary_>>_int_int";
#[builtin]
extern def operator==(:int32, :int32): bool = "__builtin_op_binary_==_int_int";
#[builtin]
extern def operator!=(:int32, :int32): bool = "__builtin_op_binary_!=_int_int";
def operator pre++(ref mutable i: int32): void
{
    i = i + 1;
    return;
}
def operator pre--(ref mutable i:int32): void
{
    i = i - 1;
    return;
}

#[builtin]
extern class array!(T, N:int32) = "__builtin_array_type"