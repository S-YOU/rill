// "type" and "void" classes are defined by compiler directly.

#[builtin]
extern def sizeof(t: type) onlymeta: int32 = "__builtin_sizeof";

#[builtin]
extern def stringof!(T)(ref p: T): raw_ptr!(uint8) = "__builtin_stringof";

//
extern def malloc(:int32): untyped_raw_ptr = "rill_core_malloc";
extern def free(:untyped_raw_ptr): void = "rill_core_free";
extern def free!(T)(:raw_ptr!(T)): void = "rill_core_free";

// TODO: fix
extern def memcpy(:raw_ptr!(uint8), :raw_ptr!(uint8), :int32): void = "rill_core_memcpy";
extern def memset(:raw_ptr!(uint8), :uint8, :int32): void = "rill_core_memset";

#[builtin]
extern def unsafe_ptr_cast!(T)(:untyped_raw_ptr): raw_ptr!(T) = "__builtin_unsafe_ptr_cast";

def new!(T)() {
    val p = malloc(sizeof!(T)());
    return p;
}

//def to!(T)(v: int32) when T

// bool
#[builtin, primitive, size = 1u, align = 1u]
extern class bool = "__builtin_bool_type"
#[builtin]
extern def operator unary! (:bool): bool = "__builtin_op_unary_pre_!_bool";

// uint8
#[builtin, primitive, size = 1u, align = 1u]
extern class uint8 = "__builtin_uint8_type"

// int32
#[builtin, primitive, size = 4u, align = 4u]
extern class int32 = "__builtin_int32_type"

// TODO: implement attributes scope
#[builtin]
extern def operator+(:int32, :int32): int32 = "__builtin_op_binary_+_int_int";
#[builtin]
extern def operator-(:int32, :int32): int32 = "__builtin_op_binary_-_int_int";
#[builtin]
extern def operator*(:int32, :int32): int32 = "__builtin_op_binary_*_int_int";
#[builtin]
extern def operator/(:int32, :int32): int32 = "__builtin_op_binary_/_int_int";
#[builtin]
extern def operator%(:int32, :int32): int32 = "__builtin_op_binary_%_int_int";
#[builtin]
extern def operator<(:int32, :int32): bool = "__builtin_op_binary_<_int_int";
#[builtin]
extern def operator>(:int32, :int32): bool = "__builtin_op_binary_>_int_int";
#[builtin]
extern def operator|(:int32, :int32): int32 = "__builtin_op_binary_|_int_int";
#[builtin]
extern def operator^(:int32, :int32): int32 = "__builtin_op_binary_^_int_int";
#[builtin]
extern def operator&(:int32, :int32): int32 = "__builtin_op_binary_&_int_int";
#[builtin]
extern def operator>=(:int32, :int32): bool = "__builtin_op_binary_>=_int_int";
#[builtin]
extern def operator<=(:int32, :int32): bool = "__builtin_op_binary_<=_int_int";
#[builtin]
extern def operator<<(:int32, :int32): int32 = "__builtin_op_binary_<<_int_int";
#[builtin]
extern def operator>>>(:int32, :int32): int32 = "__builtin_op_binary_>>>_int_int";
#[builtin]
extern def operator>>(:int32, :int32): int32 = "__builtin_op_binary_>>_int_int";
#[builtin]
extern def operator==(:int32, :int32): bool = "__builtin_op_binary_==_int_int";
#[builtin]
extern def operator!=(:int32, :int32): bool = "__builtin_op_binary_!=_int_int";
def operator pre++(ref mutable i: int32): void
{
    i = i + 1;
    return;
}
def operator pre--(ref mutable i:int32): void
{
    i = i - 1;
    return;
}


// uint32
#[builtin, primitive, size = 4u, align = 4u]
extern class uint32 = "__builtin_uint32_type"

// TODO: implement attributes scope
#[builtin]
extern def operator+(:uint32, :uint32): uint32 = "__builtin_op_binary_+_uint_uint";
#[builtin]
extern def operator-(:uint32, :uint32): uint32 = "__builtin_op_binary_-_uint_uint";
#[builtin]
extern def operator*(:uint32, :uint32): uint32 = "__builtin_op_binary_*_uint_uint";
#[builtin]
extern def operator/(:uint32, :uint32): uint32 = "__builtin_op_binary_/_uint_uint";
#[builtin]
extern def operator%(:uint32, :uint32): uint32 = "__builtin_op_binary_%_uint_uint";
#[builtin]
extern def operator<(:uint32, :uint32): bool = "__builtin_op_binary_<_uint_uint";
#[builtin]
extern def operator>(:uint32, :uint32): bool = "__builtin_op_binary_>_uint_uint";
#[builtin]
extern def operator|(:uint32, :uint32): uint32 = "__builtin_op_binary_|_uint_uint";
#[builtin]
extern def operator^(:uint32, :uint32): uint32 = "__builtin_op_binary_^_uint_uint";
#[builtin]
extern def operator&(:uint32, :uint32): uint32 = "__builtin_op_binary_&_uint_uint";
#[builtin]
extern def operator>=(:uint32, :uint32): bool = "__builtin_op_binary_>=_uint_uint";
#[builtin]
extern def operator<=(:uint32, :uint32): bool = "__builtin_op_binary_<=_uint_uint";
#[builtin]
extern def operator<<(:uint32, :uint32): uint32 = "__builtin_op_binary_<<_uint_uint";
#[builtin]
extern def operator>>(:uint32, :uint32): uint32 = "__builtin_op_binary_>>_uint_uint";
#[builtin]
extern def operator>>>(:uint32, :uint32): uint32 = "__builtin_op_binary_>>>_uint_uint";
#[builtin]
extern def operator==(:uint32, :uint32): bool = "__builtin_op_binary_==_uint_uint";
#[builtin]
extern def operator!=(:uint32, :uint32): bool = "__builtin_op_binary_!=_uint_uint";
def operator pre++(ref mutable i: uint32): void
{
    i = i + 1u;
}
def operator pre--(ref mutable i: uint32): void
{
    i = i - 1u;
}


// array
#[builtin, array_type]
extern class array!(T, N: uint32) = "__builtin_array_type"
#[builtin]
extern def operator unary& !(T, N: uint32)(:array!(T, N)): raw_ptr!T = "__builtin_take_address_from_array";
def operator[] !(T, N: uint32)(arr :array!(T, N), index: int32): ref(T) => *(&arr + index);
// uint version. TODO: remove
def operator[] !(T, N: uint32)(arr :array!(T, N), index: uint32): ref(T) => *(&arr + index);

// untyped raw pointer
#[builtin, primitive, size = 8u, align = 8u]
extern class untyped_raw_ptr = "__builtin_untyped_raw_ptr_type"

// raw pointer
#[builtin, primitive, size = 8u, align = 8u]
extern class raw_ptr!(T) = "__builtin_raw_ptr_type"

#[builtin]
extern def operator+ !(T)(:raw_ptr!(T), :int32): raw_ptr!(T) = "__builtin_op_binary_+_raw_ptr_int";
def operator- !(T)(p :raw_ptr!(T), n :int32): raw_ptr!(T) {
       return p + (0 - n);
}

// uint version. TODO: remove
#[builtin]
extern def operator+ !(T)(:raw_ptr!(T), :uint32): raw_ptr!(T) = "__builtin_op_binary_+_raw_ptr_int";
def operator- !(T)(p :raw_ptr!(T), n :uint32): raw_ptr!(T) => p + (0u - n);


#[builtin]
extern def operator unary* !(T)(:raw_ptr!(T)): ref(T) = "__builtin_op_unary_pre_*_raw_ptr";
def operator[] !(T)(p :raw_ptr!(T), index: int32): ref(T) => *(p+index);
// uint version. TODO: remove
def operator[] !(T)(p :raw_ptr!(T), index: uint32): ref(T) => *(p+index);