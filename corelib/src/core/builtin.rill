// type and void classes are defined by compiler directly.

// def sizeof!(T)() =

def new!(T)() {
    return 0;
}

// bool
#[builtin, primitive]
extern class bool = "__builtin_bool_type"
#[builtin]
extern def operator pre!(:bool): bool = "__builtin_op_unary_pre_!_bool";

// int32
#[builtin, primitive]
extern class int32 = "__builtin_int32_type"

// TODO: implement attributes scope
#[builtin]
extern def operator+(:int32, :int32): int32 = "__builtin_op_binary_+_int_int";
#[builtin]
extern def operator-(:int32, :int32): int32 = "__builtin_op_binary_-_int_int";
#[builtin]
extern def operator*(:int32, :int32): int32 = "__builtin_op_binary_*_int_int";
#[builtin]
extern def operator/(:int32, :int32): int32 = "__builtin_op_binary_/_int_int";
#[builtin]
extern def operator%(:int32, :int32): int32 = "__builtin_op_binary_%_int_int";
#[builtin]
extern def operator<(:int32, :int32): bool = "__builtin_op_binary_<_int_int";
#[builtin]
extern def operator>(:int32, :int32): bool = "__builtin_op_binary_>_int_int";
#[builtin]
extern def operator|(:int32, :int32): int32 = "__builtin_op_binary_|_int_int";
#[builtin]
extern def operator^(:int32, :int32): int32 = "__builtin_op_binary_^_int_int";
#[builtin]
extern def operator&(:int32, :int32): int32 = "__builtin_op_binary_&_int_int";
#[builtin]
extern def operator>=(:int32, :int32): bool = "__builtin_op_binary_>=_int_int";
#[builtin]
extern def operator<=(:int32, :int32): bool = "__builtin_op_binary_<=_int_int";
#[builtin]
extern def operator<<(:int32, :int32): int32 = "__builtin_op_binary_<<_int_int";
#[builtin]
extern def operator>>(:int32, :int32): int32 = "__builtin_op_binary_>>_int_int";
#[builtin]
extern def operator==(:int32, :int32): bool = "__builtin_op_binary_==_int_int";
#[builtin]
extern def operator!=(:int32, :int32): bool = "__builtin_op_binary_!=_int_int";
def operator pre++(ref mutable i: int32): void
{
    i = i + 1;
    return;
}
def operator pre--(ref mutable i:int32): void
{
    i = i - 1;
    return;
}

// array
#[builtin]
extern class array!(T, N:int32) = "__builtin_array_type"

// raw pointer
#[builtin, primitive]
extern class raw_ptr!(T) = "__builtin_raw_ptr_type"